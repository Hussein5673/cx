trigger:
- Development

steps:
# 1. Install Node.js
- task: NodeTool@0
  inputs:
    versionSpec: '18.x'
  displayName: 'Install Node.js'

# 2 List files in the working directory (for debugging)
- script: |
    ls -R
  displayName: 'List files'

# 3. HTML syntax check using HTMLHint
- script: |
    npx htmlhint "*.html" --config .htmlhintrc
  displayName: 'HTML syntax check'

# 4. CSS syntax check using Stylelint with inline configuration
- script: |
    echo '{
      "rules": {
        "block-no-empty": true,
        "color-no-invalid-hex": true
      }
    }' > .stylelintrc.json
    npx stylelint "**/*.css"
  displayName: 'CSS Syntax Check'

# 5. PHP syntax check using PHP linter
- script: |
    find . -name "*.php" -exec php -l {} \;
  displayName: 'PHP syntax check'

# 6. Package HTML, CSS, and PHP files into a ZIP archive
- script: |
    mkdir -p $(Build.ArtifactStagingDirectory)
    find . -name "*.html" -o -name "*.php" -o -name "*.css" -exec cp {} $(Build.ArtifactStagingDirectory) \;
    cd $(Build.ArtifactStagingDirectory)
    zip -r release.zip .
  displayName: 'Package HTML, CSS, and PHP Files into ZIP'

# 7. Publish the ZIP file as an artifact
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/release.zip'
    artifactName: 'html-css-php-package'
    publishLocation: 'pipeline'
  displayName: 'Publish ZIP Artifact'

# 8. Download the ZIP file artifact
- task: DownloadPipelineArtifact@2
  inputs:
    artifact: 'html-css-php-package'
    path: '$(Pipeline.Workspace)'
  displayName: 'Download ZIP Artifact'

# 9. Deploy the ZIP file to Azure Web App
- task: AzureWebApp@1
  inputs:
    azureSubscription: 'gamevaultwebapp'
    appName: 'GameVault'
    appType: 'webApp'
    package: '$(Pipeline.Workspace)/html-css-php-package/release.zip'
  displayName: 'Deploy GameVault'
