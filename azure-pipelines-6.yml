trigger:
- Development

steps:
# 1. Install Node.js
- task: NodeTool@0
  inputs:
    versionSpec: '18.x'
  displayName: 'Install Node.js'

# 3. HTML syntax check using HTMLHint
- script: |
    npx htmlhint "*.html" --config .htmlhintrc
  displayName: 'HTML syntax check'

# 4. CSS syntax check using Stylelint with inline configuration
- script: |
    echo '{
      "rules": {
        "block-no-empty": true,
        "color-no-invalid-hex": true
      }
    }' > .stylelintrc.json
    npx stylelint "**/*.css"
  displayName: 'CSS Syntax Check'

# 5. PHP syntax check using PHP linter
- script: |
    find . -name "*.php" -exec php -l {} \;
  displayName: 'PHP syntax check'

- task: Artifacts-Compress@3
  inputs:
    source: '$(Build.ArtifactStagingDirectory)'
    dest: '$(Build.ArtifactStagingDirectory)'
    compressionLevel: 'Fastest'
    multiplePackages: true
    cleanDest: false
  displayName: 'Package All Files into ZIP'

# 7. Publish the ZIP file as an artifact
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'all-files-package'
    publishLocation: 'pipeline'
  displayName: 'Publish ZIP Artifact'

# Add this step before the deployment step to verify the contents of the artifact directory
- script: |
    ls -R $(Pipeline.Workspace)/all-files-package
  displayName: 'List Artifacts Directory'

# Debug step to verify contents
- script: |
    echo "Checking contents of Build.ArtifactStagingDirectory"
    ls -R $(Build.ArtifactStagingDirectory)
  displayName: 'List Build Artifact Staging Directory'
  
# 8. Deploy the ZIP file to Azure Web App
- task: AzureWebApp@1
  inputs:
    azureSubscription: 'gamevaultwebapp'
    appName: 'GameVault'
    appType: 'webAppLinux'
    package: '$(Pipeline.Workspace)/all-files-package/output.zip'
  displayName: 'Deploy GameVault'
